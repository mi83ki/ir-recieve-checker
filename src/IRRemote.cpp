/***********************************************************************/
/*                                                                     */
/*  FILE        :IRRemote.cpp                                         */
/*  DATE        :Sep 20, 2020                                          */
/*  DESCRIPTION :IR Remoteドライブクラス                                */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki                         */
/*                                                                     */
/***********************************************************************/

#include "IRRemote.hpp"

#include <Log.h>

#define DECODE_RC6
#include "PinDefinitionsAndMore.h" // Define macros for input and output pin etc.
#define IR_REMOTE_INCLUDE
#include <IRremote.h>

/***********************************************************************/
/*                     IR Remoteドライブクラス                         */
/***********************************************************************/

uint8_t IRRemote::IR_FORMAT = RC6;

// コンストラクタ
IRRemote::IRRemote() {
  m_rxData.data.word = 0;
  m_rxData.format = 0;
  m_txData.data.word = 0;
  m_txData.format = IR_FORMAT;
  pinMode(IR_RX_PIN, INPUT);
  pinMode(IR_TX_PIN, OUTPUT);
  IrReceiver.begin(IR_RX_PIN, ENABLE_LED_FEEDBACK);
  IrSender.begin();
  m_requestSend = false;
  _bDebug = false;
}

IRRemote::~IRRemote() {}

// 受信したデータを取得する
int32_t IRRemote::getData(void) { return m_rxData.data.word; }

// 受信した攻撃力(0～15)を取得する
float IRRemote::getAp(void) { return (float)m_rxData.data.byte.ap; }

// 受信したチームIDを取得する
uint8_t IRRemote::getTeamId(void) { return m_rxData.data.byte.teamId; }

// 受信した死亡フラグを取得する
bool IRRemote::getIsDeath(void) { return m_rxData.data.byte.isDeath != 0; }

// 受信した回復フラグを取得する
bool IRRemote::getIsHeal(void) { return m_rxData.data.byte.isHeal != 0; }

// 受信したIDを取得する
uint8_t IRRemote::getId(void) { return m_rxData.data.byte.id; }

// 受信したフォーマットを取得する
int8_t IRRemote::getFormat(void) { return m_rxData.format; }

// 受信したIR構造体を取得する
IRRemote::irDataType IRRemote::getIRData(void) { return m_rxData; }

// 受信したIR構造体を初期化する
void IRRemote::clearIRData(void) {
  m_rxData.data.word = 0;
  m_rxData.format = 0;
}

/**
 * @brief デバッグモードを設定する
 * @param debug
 */
void IRRemote::setDebug(bool debug) { _bDebug = debug; }

//-------------------------------------------------------
// Function : recieveIR
// 引数     : irData : irDataTypeのアドレス
//            戻り値 : 1：受信成功、0:受信なし
//-------------------------------------------------------
bool IRRemote::recieveIR(void) {
  // decode_results results; // 赤外線受信結果を格納する

  // if (m_irRecv->decode(&results))
  if (IrReceiver.decode()) {
    m_rxData.data.word = IrReceiver.decodedIRData.decodedRawData;
    m_rxData.format = IrReceiver.decodedIRData.protocol;
    IrReceiver.resume();
    logger.debug(getDebugString());
    if (_bDebug)
      printDebug();
    return (true);
  } else {
    clearIRData(); // 受信履歴をクリア
    return (false);
  }
}

String IRRemote::getDebugString(void) {
  return "IR recieved: format = " + String(getFormat()) +
         ", id = " + String(getId()) + ", ap = " + String(getAp()) +
         ", teamId = " + String(getTeamId()) +
         ", isDeath = " + String(getIsDeath()) +
         ", isHeal = " + String(getIsHeal()) + ", 0b " +
         String((uint32_t)IrReceiver.decodedIRData.decodedRawData, BIN);
}

String IRRemote::getDebugHeaderString(void) {
  return "format,id,ap,teamId,isDeath,isHeal,raw";
}

String IRRemote::getDebugRecordString(void) {
  return String(getFormat()) + "," + String(getId()) + "," + String(getAp()) +
         "," + String(getTeamId()) + "," + String(getIsDeath()) + "," +
         String(getIsHeal()) + "," +
         String((uint32_t)IrReceiver.decodedIRData.decodedRawData, BIN);
}

/**
 * @brief デバッグ用のメッセージを出力する
 */
void IRRemote::printDebug(void) {
  Serial.println(String(millis()) + ", " + getDebugString());
}

//-------------------------------------------------------
// Function : sendIR
// 引数     : data : 送信データ8～32bit
//            nbits : 送信データビット数
//-------------------------------------------------------
// 赤外でデータを送信する（RC6）
void IRRemote::sendIR(uint32_t data, int nbits) {
  IrSender.sendRC6(data, nbits);
  logger.debug("IR sent: format = " + String(m_txData.format) +
               ", ap = " + String(m_txData.data.byte.ap) +
               ", teamId = " + String(m_txData.data.byte.teamId) +
               ", id = " + String(m_txData.data.byte.id) +
               ", isDeath = " + String(m_txData.data.byte.isDeath) +
               ", isHeal = " + String(m_txData.data.byte.isHeal));
}

// チームIDの最大値を取得する
uint8_t IRRemote::getMaxTeamId(void) { return ((1 << IR_BIT_TEAMID) - 1); }

// チームIDの値が範囲内かどうか
bool IRRemote::isValidTeamId(uint8_t teamId) {
  if (teamId > getMaxTeamId()) {
    return false;
  }
  return true;
}

// 攻撃力の最大値を取得する
float IRRemote::getMaxAp(void) { return ((1 << IR_BIT_AP) - 1); }

// 攻撃力の値が範囲内かどうか
bool IRRemote::isValidAp(float ap) {
  if (ap > getMaxAp()) {
    return false;
  } else if (ap < 0.0f) {
    return false;
  }
  return true;
}

/**
 * @brief 赤外送信情報をセットする
 *
 * @param id 自分のID
 * @param teamId チームID
 * @param ap 攻撃力
 * @param isDeath 死亡フラグ
 * @param isHeal 回復フラグ
 */
void IRRemote::sendMyId(uint8_t id, uint8_t teamId, float ap, bool isDeath,
                        bool isHeal) {
  m_txData.data.word = 0;
  m_txData.data.byte.id = id;
  // teamIdの最大値を制限
  if (!isValidTeamId(teamId)) {
    logger.error("sendMyId() : teamId=" + String(teamId) + " is larger than " +
                 String(getMaxTeamId()));
    teamId = getMaxTeamId();
  }
  m_txData.data.byte.teamId = teamId;

  // 攻撃力apの最大値を制限
  if (ap > getMaxAp()) {
    logger.error("sendMyId() : ap=" + String(teamId) + " was larger than " +
                 String(getMaxAp()));
    ap = getMaxAp();
  } else if (ap < 0.0f) {
    logger.error("sendMyId() : ap=" + String(teamId) + " was negative number");
    ap = 0.0f;
  }
  m_txData.data.byte.ap = (uint8_t)(ap + 0.5f);

  // 死亡フラグ
  m_txData.data.byte.isDeath = isDeath ? 1 : 0;

  // 回復フラグ
  m_txData.data.byte.isHeal = isHeal ? 1 : 0;

  requestSendIR();
}

// 赤外送信をリクエストする
void IRRemote::requestSendIR(void) { m_requestSend = true; }

// 赤外送信がリクエストされているかどうか
bool IRRemote::isRequestSend(void) {
  if (m_requestSend) {
    m_requestSend = false;
    return true;
  }
  return false;
}

// フォーマットが正しいかどうか
bool IRRemote::isCorrectFormat(int8_t format) { return format == IR_FORMAT; }

// 赤外送信をリクエストされたときに送信処理を行う
// 処理の途中で他の割込みが入らないように配慮すること
bool IRRemote::drive(void) {
  if (isRequestSend()) {
    sendIR(m_txData.data.word, IR_DATA_SIZE);
    return true;
  }
  return false;
}

/***********************************************************************/
/*                 IR Remoteドライブクラス（第二世代）                 */
/***********************************************************************/
// コンストラクタ
IRRemote2::IRRemote2(uint8_t brightness) {
  pinMode(IR_LEDBR_HIGH, OUTPUT);
  pinMode(IR_LEDBR_MIDDLE, OUTPUT);
  pinMode(IR_LEDBR_LOW, OUTPUT);

  setBrightness(brightness);
}

IRRemote2::~IRRemote2() {}

void IRRemote2::allOff(void) {
  digitalWrite(IR_LEDBR_HIGH, LOW);
  digitalWrite(IR_LEDBR_MIDDLE, LOW);
  digitalWrite(IR_LEDBR_LOW, LOW);
}

void IRRemote2::setBrightness(uint8_t brightness) {
  switch (brightness) {
  case IR_HIGH:
    allOff();
    digitalWrite(IR_LEDBR_HIGH, HIGH);
    break;
  case IR_MIDDLE:
    allOff();
    digitalWrite(IR_LEDBR_MIDDLE, HIGH);
    break;
  case IR_LOW:
    allOff();
    digitalWrite(IR_LEDBR_LOW, HIGH);
    break;
  default:
    allOff();
    break;
  }
  logger.info("IRRemote2::setBrightness(): Set IR brightness " +
              String(brightness));
}
