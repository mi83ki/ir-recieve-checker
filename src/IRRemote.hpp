/***********************************************************************/
/*                                                                     */
/*  FILE        :IRRemote.hpp                                         */
/*  DATE        :Sep 20, 2020                                          */
/*  DESCRIPTION :IR Remoteドライブクラス                                */
/*                                                                     */
/*  This file is generated by Tatsuya Miyazaki                         */
/*                                                                     */
/***********************************************************************/

#pragma once

#include <Arduino.h>

#define IR_BIT_AP 6      // 攻撃力に割り当てるbit数（6bit：0～63）
#define IR_BIT_TEAMID 2  // チームIDに割り当てるbit数（2bit：0～3）

class IRRemote {
 public:
  typedef struct ir_data {
    union uData {
      uint16_t word;
      struct {
        uint8_t ap : IR_BIT_AP;          // 攻撃力（0～63）
        uint8_t teamId : IR_BIT_TEAMID;  // チームID（0～3）
        uint8_t isDeath : 1;             // 死亡フラグ
        uint8_t isHeal : 1;              // 回復フラグ
        uint8_t id : 6;                  // ID（0～63）
      } byte;
    } data;
    int8_t format;
  } irDataType;
  // コンストラクタ
  IRRemote();
  ~IRRemote();
  int32_t getData(void);
  float getAp(void);
  uint8_t getTeamId(void);
  bool getIsDeath(void);
  bool getIsHeal(void);
  uint8_t getId(void);
  int8_t getFormat(void);
  irDataType getIRData(void);
  void clearIRData(void);
  void setDebug(bool debug);
  bool recieveIR(void);
  void printDebug(void);
  void sendIR(uint32_t data, int nbits);
  static uint8_t getMaxTeamId(void);
  static bool isValidTeamId(uint8_t teamId);
  static float getMaxAp(void);
  static bool isValidAp(float ap);
  void sendMyId(uint8_t id, uint8_t teamId, float ap, bool isDeath,
                bool isHeal);
  void requestSendIR(void);
  bool isRequestSend(void);
  static bool isCorrectFormat(int8_t format);
  bool drive(void);

 private:
  irDataType m_rxData;
  irDataType m_txData;
  bool m_requestSend;
  bool _bDebug;

  // 各種設定値
  static const uint8_t IR_RX_PIN = 35;      // 赤外線受光素子
  static const uint8_t IR_TX_PIN = 33;      // 赤外線送信用LED
  static uint8_t IR_FORMAT;                 // 赤外発光のフォーマット
  static const uint8_t IR_DATA_SIZE = 16;   // IDのデータサイズ(bit)
  static const uint8_t IR_LEDBR_HIGH = 32;  // 赤外LEDの高輝度ピン
  static const uint8_t IR_LEDBR_MIDDLE = 27;  // 赤外LEDの中輝度ピン
  static const uint8_t IR_LEDBR_LOW = 26;     // 赤外LEDの低輝度ピン
};

// 第二世代クナイデバイスの赤外送受信クラス
class IRRemote2 : public IRRemote {
 public:
  enum EIRBright {
    IR_LOW = 0,     // 低輝度
    IR_MIDDLE = 1,  // 中輝度
    IR_HIGH = 2     // 高輝度
  };
  IRRemote2(uint8_t brightness);
  ~IRRemote2();
  void setBrightness(uint8_t brightness);

 private:
  void allOff(void);

 private:
  static const uint8_t IR_LEDBR_HIGH = 32;    // 赤外LEDの高輝度ピン
  static const uint8_t IR_LEDBR_MIDDLE = 27;  // 赤外LEDの中輝度ピン
  static const uint8_t IR_LEDBR_LOW = 26;     // 赤外LEDの低輝度ピン
};
